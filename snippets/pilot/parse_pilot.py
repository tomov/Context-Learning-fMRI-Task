# Parse the wide format .csv file generated by psychopy
# and dump it into a nicely trimmed csv file that our MATLAB scripts can understand
# Usage: python parse.py [input csv file] [output csv file]
# Usage: python parse.py [input csv file] [output csv file] -a
# The former creates a new file (or overwrites it) and adds headers for column names
# The latter appends to an existing file without adding headers
#
# Optionally -f to parse the extra fMRI-synced event onsets/offsets

import os
import sys
import csv

colformat = "%s %s %s %d %s %s %s %d %d %s %s %s %f %d %s %s %d %d %d"

# colnames used for the behavioral pilot
# may want to be careful adding stuff here -- will have to change things in the analyze.m script too (in ../../model)
#
colnames = [
    'participant',
    'session',
    'mriMode',
    'isPractice',
    'restaurantsReshuffled',
    'foodsReshuffled',
    'contextRole',
    'contextId',
    'cueId',
    'sick',
    'corrAns',
    'response.keys',
    'response.rt',
    'response.corr',
    'restaurant',
    'food',
    'isTrain',
    'roundId',
    'trialId'
]

fmri_colnames = [ 
    'choiceOnset',
    'choiceOffset',
    'isiOnset',
    'isiOffset',
    'feedbackOnset',
    'feedbackOffset',
    'itiOnset',
    'itiOffset',
    'itiTime',
    'newItiTime',
    'residualTime'
]

assert len(colnames) == len(colformat.split(' ')), "Make sure to update colformat here and in the MATLAB script that parses the file"

# To convert from fMRI responses to behavioral responses
#
corrAnsMapping = {
    'left': 'left',
    'right': 'right',
    '1': 'left',
    '2': 'right',
    'None': 'None'
}

# which columns to export from the csv
#
def parseRow(entry, isFmri=False):
    if entry['contextId'] == '': # not a trial (e.g. instructions)
        return None
    isTrain = entry['trials.thisN'] != ''
    assert isTrain or entry['test_trials.thisN'] != ''
    entryContextsReshuffled = [int(x) for x in entry['contextsReshuffled'].split(',')]
    entryCuesReshuffled = [int(x) for x in entry['cuesReshuffled'].split(',')]
    entryRestaurants = [r.strip() for r in entry['restaurantNames'].split(',')]
    out = [
        entry['participant'],
        entry['session'],
        entry['mriMode'],
        int(entry['isPractice'] == 'yes'),
        #"expStart": "1990-03-02 20:00:00", # TODO
        #'"' + entry['restaurantNames'] + '"',
        '"' + ';'.join([entryRestaurants[entryContextsReshuffled[x]] for x in range(0, 3)]) + '"', # restaurantNames
        '"' + ';'.join([entry['foodFilesPrefix'] + str(entryCuesReshuffled[x]) for x in range(0, 3)]) + '"', # foods
        entry['contextRole'],
        entry['contextIdReal'],
        entry['cueIdReal'],
        entry['sickReal'],
        corrAnsMapping[entry['corrAnsReal']],
        entry['responseKey.keys'] if isTrain else entry['responseKey_2.keys'],
        entry['responseKey.rt'] if isTrain else entry['responseKey_2.rt'],
        entry['responseKey.corr'] if isTrain else entry['responseKey_2.corr'],
        entry['restaurant'],
        entry['food'],
        int(isTrain),
        int(entry['runs.thisN']) + 1,
        (int(entry['trials.thisN']) + 1) if isTrain else (int(entry['test_trials.thisN']) + 1)
    ]
    if isFmri:
        out.extend([
            entry['choiceOnset'],
            entry['choiceOffset'],
            entry['isiOnset'],
            entry['isiOffset'],
            entry['feedbackOnset'],
            entry['feedbackOffset'],
            entry['itiOnset'],
            entry['itiOffset'],
            entry['itiTime'],
            entry['newItiTime'],
            entry['residualTime']
        ])
    assert len(out) == len(colnames) + (len(fmri_colnames) if isFmri else 0), "Make sure to update colnames"
    # sanity check to make sure we didn't screw up the data gathering
    #
    assert entryRestaurants[entryContextsReshuffled[int(entry['contextIdReal'])]] == entry['restaurant'], "You screwed up the data gathering -- these should be equal"
    assert entry['foodFilesPrefix'] + str(entryCuesReshuffled[int(entry['cueIdReal'])]) == entry['food'], "You screwed up the data gathering -- these should be equal"
    # TODO add an assert for corrAns and sick based on context role

    return ','.join([str(x) for x in out])

if __name__  == "__main__":
    infile = sys.argv[1]
    outfile = sys.argv[2]
    append = False
    isFmri = False
    if len(sys.argv) >= 4:
        args = sys.argv[3:]
        append = '-a' in args or '--append' in args
        isFmri = '-f' in args or '--fmri' in args

    if append:
        desc = 'a'
    else:
        desc = 'w'
    
    with open(infile, 'r') as fin:
        reader = csv.DictReader(fin)
        with open(outfile, desc) as fout: 
            if not append: # write the headers optionally
                if isFmri:
                    fout.write(','.join(colnames + fmri_colnames) + "\n")
                else:
                    fout.write(','.join(colnames) + "\n")
            for row in reader:
                parsedRow = parseRow(row, isFmri)
                if parsedRow:
                    fout.write(parsedRow + "\n")
